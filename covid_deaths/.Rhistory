}
# X-Axis Label
xlabel <- "Year"
if(input$xvariable=="month"){
xlabel <- "Month"
}
# X-Axis Tick Marks
xmin <- dftoplot %>% summarize(min(!!as.name(input$xvariable))) %>% as.numeric()
xmax <- dftoplot %>% summarize(max(!!as.name(input$xvariable))) %>% as.numeric()
# Graph
ggplot(dftoplot, aes(x=!!as.name(input$xvariable),
y=!!as.name(input$yvariable))) +
geom_line(color="yellow3", linewidth=1) +
theme_bw(base_size=15) +
ylab(ylabel) + xlab(xlabel) +
ggtitle(paste0(ylabel, " by ", xlabel, " (n=", nrow(dffiltered), ")")) +
scale_x_continuous(breaks=seq(xmin, xmax, 1))
})
}
# 3. Create the Shiny Application
shinyApp(ui, server)
# data source: https://data.cdc.gov/Public-Health-Surveillance/Monthly-COVID-19-Death-Rates-per-100-000-Populatio/exs3-hbne/about_data
library(shiny)
library(dplyr)
library(ggplot2)
# 1. User Interface Object
ui <- fluidPage(
titlePanel("COVID-19 Monthly Deaths"),
sidebarLayout(
# CONTROL WIDGETS
sidebarPanel(
# SLIDER: YEAR
sliderInput(inputId = "year",
label = "Range of Years:",
min = 2020, max = 2024,
value = c(2020, 2024),
sep = ""),
# RADIO BUTTON: Y-AXIS
radioButtons(inputId = "yvariable",
label = "Y-Axis (Deaths):",
choices = list(
"# of deaths" = "no_of_deaths",
"Death rate per 100,000 population" = "death_rates")),
# RADIO BUTTON: X-AXIS
radioButtons(inputId = "xvariable",
label = "X-Axis (Time):",
choices = list(
"Year" = "year",
"Month" = "month")),
# RADIO BUTTON: DEMOGRAPHICS
radioButtons(inputId = "demographics",
label = "Demographics:",
choices = list(
"Sex" = "sex",
"Age" = "age",
"Race" = "race")),
# DROPDOWN MENU: LOCATION
selectInput(inputId="jurisdiction",
label="Select HHS Region:",
choices = list(
"United States"="United States",
"Region 1 (CT, ME, MA, NH, RI, VT)" = "Region 1",
"Region 2 (NJ, NY, PR, VI)" = "Region 2",
"Region 3 (DE, DC, MD, PA, VA, WV)" = "Region 3",
"Region 4 (AL, FL, GA, KY, MS, NC, SC, TN)" = "Region 4",
"Region 5 (IL, IN, MI, MN, OH, WI)" = "Region 5",
"Region 6 (AR, LA, NM, OK, TX)" = "Region 6",
"Region 7 (IA, KS, MO, NE)" = "Region 7",
"Region 8 (CO, MT, ND, SD, UT, WY)" = "Region 8",
"Region 9 (AZ, CA, HI, NV, AS, GU, MP)" = "Region 9",
"Region 10 (AK, ID, OR, WA)" = "Region 10")),
# TEXT: DATA SOURCE
"Data collected from CDC:",
htmltools::a("COVID deaths", href="https://data.cdc.gov/Public-Health-Surveillance/Monthly-COVID-19-Death-Rates-per-100-000-Populatio/exs3-hbne/about_data"),
"Data includes COVID-19 Monthly Death Rates per 100,000 Population from January 2020 to December 2024."
),
# GRAPH & TABLE
mainPanel(
plotOutput("graph"),
tableOutput("codestable")
)
)
)
# 2. Server Function
server <- function(input, output){
# IMPORT DATASET
df <- read.csv("covid_deaths.csv")
df$year <-  format(as.Date(df$data_period_end, format = "%m/%d/%Y"), "%Y")
df$month <-  format(as.Date(df$data_period_end, format = "%m/%d/%Y"), "%m")
# FILTER DATASET
dffiltered <- reactive({
# Filter by Year
df <- df %>% filter(year>=input$year[1] & year<=input$year[2])
# Filter by Location
if(input$jurisdiction!="United States"){
df <- df %>% filter(!!as.name(input$jurisdiction)==1)
}
return(df)
})
# GRAPH OUTPUT
output$graph<-renderPlot({
# Prepare Graph Data
dffiltered  <- as.data.frame(dffiltered ())
dftoplot <- dffiltered  %>%
group_by(year) %>%
summarise(no_of_deaths = sum(covid_deaths, na.rm = TRUE),
death_rates = sum(crude_rate, na.rm = TRUE))
# Y-Axis Label
ylabel <- "# of deaths"
if(input$yvariable=="death_rates"){
ylabel <- "Death rate per 100,000 population"
}
# X-Axis Label
xlabel <- "Year"
if(input$xvariable=="month"){
xlabel <- "Month"
}
# X-Axis Tick Marks
xmin <- dftoplot %>% summarize(min(!!as.name(input$xvariable))) %>% as.numeric()
xmax <- dftoplot %>% summarize(max(!!as.name(input$xvariable))) %>% as.numeric()
# Graph
ggplot(dftoplot, aes(x=!!as.name(input$xvariable),
y=!!as.name(input$yvariable))) +
geom_line(color="yellow3", linewidth=1) +
theme_bw(base_size=15) +
ylab(ylabel) + xlab(xlabel) +
ggtitle(paste0(ylabel, " by ", xlabel, " (n=", nrow(dffiltered), ")")) +
scale_x_continuous(breaks=seq(xmin, xmax, 1))
})
}
# 3. Create the Shiny Application
shinyApp(ui, server)
dffiltered <- reactive({
# Filter by Year
df <- df %>% filter(year>=input$year[1] & year<=input$year[2])
# Filter by Location
if(input$jurisdiction!="United States"){
df <- df %>% filter(!!as.name(input$jurisdiction)==1)
}
return(df)
})
dffiltered  <- as.data.frame(dffiltered ())
test <- df  %>%
group_by(year) %>%
summarise(no_of_deaths = sum(covid_deaths, na.rm = TRUE),
death_rates = sum(crude_rate, na.rm = TRUE))
View(test)
print(dffiltered)
print(dffiltered())
test <- isolate(dffiltered())
df <- df %>% filter(year>=2020 & year<=2022)
# Filter by Year
df <- df %>% filter(year>=2020 & year<=2022) %>% filter(jurisdiction_residence == "United States")
unique(df$year)
unique(df$jurisdiction_residence)
dftoplot <- df  %>%
group_by(year) %>%
summarise(no_of_deaths = sum(covid_deaths, na.rm = TRUE),
death_rates = sum(crude_rate, na.rm = TRUE))
colnames(df)
ggplot(dftoplot, aes(x=!!as.name(df$year),
y=!!as.name(df$covid_deaths))) +
geom_line(color="yellow3", linewidth=1) +
theme_bw(base_size=15) +
ylab(ylabel) + xlab(xlabel) +
ggtitle(paste0(ylabel, " by ", xlabel, " (n=", nrow(df), ")")) +
scale_x_continuous(breaks=seq(xmin, xmax, 1))
ylabel <- "# of deaths"
xlabel <- "Year"
ggplot(dftoplot, aes(x=!!as.name(df$year),
y=!!as.name(df$covid_deaths))) +
geom_line(color="yellow3", linewidth=1) +
theme_bw(base_size=15) +
ylab(ylabel) + xlab(xlabel) +
ggtitle(paste0(ylabel, " by ", xlabel, " (n=", nrow(df), ")")) +
scale_x_continuous(breaks=seq(xmin, xmax, 1))
xmin <- dftoplot %>% summarize(min(!!as.name(df$year))) %>% as.numeric()
class(df$year)
unique(df$month)
df$month <-  format(as.Date(df$data_period_end, format = "%m/%d/%Y"), "%m")
head(df$month,n=5)
unique(df$month)
# IMPORT DATASET
df <- read.csv("covid_deaths.csv")
df$year <-  as.numeric(format(as.Date(df$data_period_end, format = "%m/%d/%Y"), "%Y"))
df$month <-  as.numeric(format(as.Date(df$data_period_end, format = "%m/%d/%Y"), "%m"))
# Filter by Year
df <- df %>% filter(year>=2020 & year<=2022) %>% filter(jurisdiction_residence == "United States")
dftoplot <- df  %>%
group_by(year) %>%
summarise(no_of_deaths = sum(covid_deaths, na.rm = TRUE),
death_rates = sum(crude_rate, na.rm = TRUE))
ylabel <- "# of deaths"
xlabel <- "Year"
xmin <- dftoplot %>% summarize(min(!!as.name(df$year))) %>% as.numeric()
xmax <- dftoplot %>% summarize(max(!!as.name(df$year))) %>% as.numeric()
ggplot(dftoplot, aes(x=!!as.name(df$year),
y=!!as.name(df$covid_deaths))) +
geom_line(color="yellow3", linewidth=1) +
theme_bw(base_size=15) +
ylab(ylabel) + xlab(xlabel) +
ggtitle(paste0(ylabel, " by ", xlabel, " (n=", nrow(df), ")")) +
scale_x_continuous(breaks=seq(xmin, xmax, 1))
xmin <- dftoplot %>% summarize(min(!!as.name(df$year))) %>% as.numeric()
!!as.name(df$year)
as.name(df$year)
xmin <- dftoplot %>% summarize(min(df$year))
xmax <- dftoplot %>% summarize(max(df$year))
xmin
xmax
ggplot(dftoplot, aes(x=!!as.name(df$year),
y=!!as.name(df$covid_deaths))) +
geom_line(color="yellow3", linewidth=1) +
theme_bw(base_size=15) +
ylab(ylabel) + xlab(xlabel) +
ggtitle(paste0(ylabel, " by ", xlabel, " (n=", nrow(df), ")")) +
scale_x_continuous(breaks=seq(xmin, xmax, 1))
xmin <- dftoplot %>% summarize(min(df$year)) %>% as.numeric()
xmax <- dftoplot %>% summarize(max(df$year)) %>% as.numeric()
ggplot(dftoplot, aes(x=!!as.name(df$year),
y=!!as.name(df$covid_deaths))) +
geom_line(color="yellow3", linewidth=1) +
theme_bw(base_size=15) +
ylab(ylabel) + xlab(xlabel) +
ggtitle(paste0(ylabel, " by ", xlabel, " (n=", nrow(df), ")")) +
scale_x_continuous(breaks=seq(xmin, xmax, 1))
setwd("C:/Users/JiwoonPark/OneDrive - Key Proteo/Desktop/Shiny/census-app")
runApp("census-app", display.mode = "showcase")
runApp(display.mode = "showcase")
install.packages(c("maps", "mapproj"))
library(maps)
library(mapproj)
source("census-app/helpers.R")
setwd("C:/Users/JiwoonPark/OneDrive - Key Proteo/Desktop/Shiny/census-app")
library(maps)
library(mapproj)
source("census-app/helpers.R")
setwd("C:/Users/JiwoonPark/OneDrive - Key Proteo/Desktop/Shiny")
source("census-app/helpers.R")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
ui <- page_sidebar(
title = "censusVis",
sidebar = sidebar(
helpText(
"Create demographic maps with information from the 2010 US Census."
),
selectInput(
"var",
label = "Choose a variable to display",
choices =
c(
"Percent White",
"Percent Black",
"Percent Hispanic",
"Percent Asian"
),
selected = "Percent White"
),
sliderInput(
"range",
label = "Range of interest:",
min = 0,
max = 100,
value = c(0, 100)
),
),
card(plotOutput("map"))
)
# Server logic ----
server <- function(input, output) {
output$map <- renderPlot({
data <- switch(input$var,
"Percent White" = counties$white,
"Percent Black" = counties$black,
"Percent Hispanic" = counties$hispanic,
"Percent Asian" = counties$asian)
color <- switch(input$var,
"Percent White" = "darkgreen",
"Percent Black" = "black",
"Percent Hispanic" = "darkorange",
"Percent Asian" = "darkviolet")
legend <- switch(input$var)
percent_map(var = data, color = color, legend.title = legend, max = input$range[1], min = input$range[2])
})
}
# Run app ----
shinyApp(ui, server)
args <- switch(input$var,
"Percent White" = list(counties$white, "darkgreen", "% White"),
"Percent Black" = list(counties$black, "black", "% Black"),
"Percent Hispanic" = list(counties$hispanic, "darkorange", "% Hispanic"),
"Percent Asian" = list(counties$asian, "darkviolet", "% Asian"))
library(shiny)
# User interface ----
ui <- page_sidebar(
title = "censusVis",
sidebar = sidebar(
helpText(
"Create demographic maps with information from the 2010 US Census."
),
selectInput(
"var",
label = "Choose a variable to display",
choices =
c(
"Percent White",
"Percent Black",
"Percent Hispanic",
"Percent Asian"
),
selected = "Percent White"
),
sliderInput(
"range",
label = "Range of interest:",
min = 0,
max = 100,
value = c(0, 100)
),
),
card(plotOutput("map"))
)
# Server logic ----
server <- function(input, output) {
output$map <- renderPlot({
args <- switch(input$var,
"Percent White" = list(counties$white, "darkgreen", "% White"),
"Percent Black" = list(counties$black, "black", "% Black"),
"Percent Hispanic" = list(counties$hispanic, "darkorange", "% Hispanic"),
"Percent Asian" = list(counties$asian, "darkviolet", "% Asian"))
args$min <- input$range[1]
args$max <- input$range[2]
do.call(percent_map, args)
})
}
# Run app ----
shinyApp(ui, server)
install.packages("quantmod")
library(shiny)
library(bslib)
library(ggplot2)
# Get the data
file <- "https://github.com/rstudio-education/shiny-course/raw/main/movies.RData"
destfile <- "movies.RData"
download.file(file, destfile)
# Load data
load("movies.RData")
View(movies)
runApp('movies-app')
runApp('movies-app')
runApp('movies-app')
runApp('movies-app')
runApp('movies-app')
runApp('movies-app')
?numericInput
?sample_n
runApp('movies-app')
runApp('movies-app')
runApp('movies-app')
?selectInput
?selectizeInput
runApp('movies-app')
runApp('movies-app')
runApp('movies-app')
runApp('movies-app')
?dateRangeInput
head(movies,n=5)
runApp('movies-app')
?as.POSIXct
runApp('movies-app')
dplyr::last_dplyr_warnings()
runApp('movies-app')
runApp('movies-app')
runApp('movies-app')
runApp('movies-app')
runApp('movies-app')
runApp('movies-app')
runApp('movies-app')
?pull
?verbatimTextOutput
?summarise
runApp('movies-app')
runApp('movies-app')
runApp('movies-app')
?downloadButton
runApp('movies-app')
library(dplyr)
library(readr)
runApp('movies-app')
runApp('movies-app')
runApp('movies-app')
runApp('movies-app')
runApp('movies-app')
runApp('movies-app')
runApp('movies-app')
runApp('movies-app')
library(shiny)
library(bslib)
library(ggplot2)
library(dplyr)
library(tools)
?toTitleCase
runApp('movies-app/app2.R')
runApp('movies-app/app2.R')
runApp('movies-app/app2.R')
runApp('movies-app/app2.R')
runApp('movies-app/app2.R')
runApp('movies-app/app2.R')
setwd("C:/Users/JiwoonPark/OneDrive - Key Proteo/Desktop/Shiny/App-1")
head(df,n=1)
unique(df$group)
runApp()
runApp()
runApp()
runApp()
df <- read.csv("covid_deaths.csv")
df$year <-  as.numeric(format(as.Date(df$data_period_end, format = "%m/%d/%Y"), "%Y"))
unique(df$year)
df$month <-  as.numeric(format(as.Date(df$data_period_end, format = "%m/%d/%Y"), "%m"))
unique(df$month)
runApp()
runApp()
runApp()
unique(df$group)
runApp()
runApp()
unique(df$subgroup1)
unique(df$subgroup2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
colnames(df)
unique(df$group)
runApp()
runApp()
runApp()
df$jurisdiction_residence
runApp()
runApp()
runApp()
runApp()
View(df)
runApp()
runApp()
runApp()
runApp()
View(df)
test <- df %>% group_by(data_period_start) %>% mutate(sum = sum(crude_rate), na.rm = T)
View(test)
test <- df %>% group_by(data_period_start) %>% summarise(sum = sum(crude_rate, na.rm = T))
View(test)
library(plotly)
runApp()
colnames(df)
View(df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(df)
runApp()
runApp()
runApp()
runApp()
View(df)
runApp()
unique(df$subgroup1)
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='jpark23',
token='9E7D0F2A26A655800757EE18C48BB847',
secret='<SECRET>')
library(rsconnect)
rsconnect::setAccountInfo(name='jpark23',
token='9E7D0F2A26A655800757EE18C48BB847',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jpark23',
token='9E7D0F2A26A655800757EE18C48BB847',
secret='<SECRET>')
Sys.setlocale(locale="English")
Sys.setlocale(locale="en_US.UTF-8")
rsconnect::setAccountInfo(name='jpark23',
token='9E7D0F2A26A655800757EE18C48BB847',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jpark23',
token='9E7D0F2A26A655800757EE18C48BB847',
secret='8u5W7aajw/DWB8/LgDGXvRHCnB6Je3EmDzWSh+9R')
runApp()
runApp()
runApp()
